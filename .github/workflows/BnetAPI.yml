name: bnetAPI
on: push
env:
  ACCOUNT_REGION: eu
  GAMER_TAG: Brodde#2647
jobs:
  authenticate-bnet:
    runs-on: windows-latest
    outputs:
      access-token: ${{steps.bnet-auth.outputs.access-token}}
      matrix: ${{ steps.fetch-characters.outputs.matrix }}
    steps:

      - name: Check out repo
        uses: actions/checkout@v2

      - name: Authenticate with BNet
        id: bnet-auth
        run: |
          $AccessToken =  ./Scripts/GetBnetToken.ps1 ${{secrets.WOW_CLIENT_ID}} ${{secrets.WOW_CLIENT_SECRET}} ${{env.ACCOUNT_REGION}}
          echo "::set-output name=access-token::$AccessToken"
  
      - name: Get Characters from Server
        id: fetch-characters
        run: |
          $Characters = ./Scripts/GetCharactersFromServer.ps1 ${{steps.bnet-auth.outputs.access-token }} ${{env.ACCOUNT_REGION}} ${{env.GAMER_TAG}}
          Write-Host $Characters
          echo "::set-output name=matrix::$Characters"

  wire-character-data:
    needs: authenticate-bnet
    runs-on: windows-latest
    strategy:
      matrix: ${{fromJson(needs.authenticate-bnet.outputs.matrix)}}
      fail-fast: false
    outputs:
      file-name: ${{ steps.clean-character-data.outputs.file-name }}
    steps:
        
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Clean Character Data
        id: clean-character-data
        shell: pwsh
        run: |
          $CharacterDataJson = ./Scripts/WireCharacterData.ps1 ${{env.ACCOUNT_REGION}} ${{env.GAMER_TAG}} ${{needs.authenticate-bnet.outputs.access-token }} ${{ matrix.Id }} ${{ matrix.ClassSlug }}
          $CharacterData = ConvertFrom-Json -InputObject $CharacterDataJson
         
          pwd
          mkdir artifacts/characters
          $CurrentDir = Get-Location
          $FileName = $CurrentDir.ToString()+"/artifacts/characters/"+$CharacterData.Name+"_"+$CharacterData.Id+".json"
          Write-Host "Writing file : $FileName"
          $CharacterData | ConvertTo-Json -Depth 10 | Out-File $FileName
          dir artifacts/characters

          echo "::set-output name=file-name::$FileName"

      - name: Upload Character Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifact-characters
          path: ${{ steps.clean-character-data.outputs.file-name }}


  process-character-data:
    needs: wire-character-data
    runs-on: windows-latest
    outputs:
      notify-message: ${{steps.select-most-played-character.outputs.notify-message}}
    steps:
        
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Download Character Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact-characters
          path: artifacts/characters

      - name: Select Most Played Character
        id: select-most-played-character
        run: |
          
          $ArtifactFolder = "${{steps.download-artifacts.outputs.download-path}}\"
          Write-Host "Artifact folder: $ArtifactFolder"

          $HighestKills = 0
          $HighestHero = $null
          foreach($File in Get-ChildItem $ArtifactFolder)
          {
      
              $Hero = Get-Content -Raw -Path $File.FullName | ConvertFrom-Json
              if($Hero.EliteKills -gt $HighestKills)
              {
                  $HighestKills = $Hero.EliteKills
                  $HighestHero = $Hero
              }
          }

          Write-Host $HighestHero 
          $Message = "`n`n### HIGHEST  CHARACTER###`n`n"
          $Message += "Name: "+$HighestHero.Name+"`n"
          $Message += "Class: "+$HighestHero.Class+"`n"
          $Message += "Elite Kills: "+$HighestHero.EliteKills+"`n`n"
          $Message += "Stats: `n"

          $ItemTableRaw =@{}
          $HighestHero.Stats.psobject.Properties | foreach {$ItemTableRaw[$_.Name] = $_.Value}
          foreach($Item in $ItemTableRaw.GetEnumerator())
          {
              $Message +="`t"+$Item.Key+": "+$Item.Value+"`n"
          }
          $Message += "Gear:`n"
          $ItemTableRaw =@{}
          $HighestHero.Gear.psobject.Properties | foreach {$ItemTableRaw[$_.Name] = $_.Value}
          foreach($Item in $ItemTableRaw.GetEnumerator())
          {
              $GearSummary = $Item.Value.Name+" - "+$Item.Value.TypeName
              $Message +="`t"+$Item.Key+": "+$GearSummary+"`n"
          }
          echo "::set-output name=notify-message::$Message"
          Write-Host "Message: $Message"
          
      - name: Check message
        run: |
          $Message = ${{steps.select-most-played-character.outputs.notify-message}}
          Write-Host "Message: $Message"

  teams-notification:
    runs-on: ubuntu-latest
    needs: process-character-data
    if: always()
    steps:
    
      - name: Check message
        run: |
          Write-Host "Message: ${{needs.process-character-data.outputs.notify-message}}"

      - name: Notify Teams
        id: notify       
        uses: thechetantalwar/notify@v2
        with:
          teams_webhook_url: ${{secrets.TEAMS_NOTIFICATION_WEBHOOK}}
          message: "Github Action Build Number ${{ github.run_number }} Completed for ${{ github.repository }} and the outcome is  ${{ needs.process-character-data.outputs.notify-message }}."
